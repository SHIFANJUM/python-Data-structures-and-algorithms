#stack by using list
class stack:
    def __init__(self):
        self.items=[]
    def is_empty(self):
        return len(self.items)==0
    def push(self,items):
        self.items.append(items)
    def pop(self):
        if not self.is_empty():
            return self.items.pop()
        else:
            raise IndexError("pop from the empty stack")
    def peek(self):
       if not self.is_empty():
           return self.items[-1]
       else:
           raise IndexError("pop from the empty stack")
    def size(self): 
        return len(self.items)
stack=stack()
print('is the stack empty',stack.is_empty())
stack.push(1)
stack.push(5)
stack.push(3)
print('stack',stack.items)
print('top of the stack',stack.peek())
print('pop',stack.pop())

#queue with list
class queuelist:
    def __init__(self):
        self.items=[]
    def is_empty(self):
        return len(self.items)==0
    def enqueue(self,items):
        self.items.append(items)
    def dequeue(self):
        if not self.is_empty():
            return self.items.pop(0)
        else:
            raise IndexError('dequeue from an empty queue ')
    def peek(self):
        if not self.is_empty():
            return self.items[0]
        else:
            raise IndexError('peek from an empty queue')
    def size(self):
        return len(self.items)
queue=queuelist()
queue.enqueue(1)
queue.enqueue(2)
queue.enqueue(3)
print('front of the queue:',queue.peek())
print("dequeue",queue.dequeue ())
print('size of the queue:',queue.size())

class Node:
    
    def __init__(self, data):
        self.data = data
        self.next = None

class Stack:
    
    def __init__(self):
        self.head = None
    
    def is_empty(self):
        return self.head is None
    
    def push(self, data):
        new_node = Node(data)
        new_node.next = self.head
        self.head = new_node
    
    def pop(self):
        if self.is_empty():
            return None
        popped = self.head.data
        self.head = self.head.next 
        return popped
    
    def peek(self):
        if self.is_empty():
            return None
        return self.head.data
    
    def display(self):
        current = self.head
        while current:
            print(current.data, end=" -> ")
            current = current.next
        print("None") 

stack = Stack()
stack.push(1)
stack.push(2)
stack.push(3)
stack.display()
print("Popped:", stack.pop())
print("Peek:", stack.peek())   
stack.display()

#queue with linkedlist
class Node:
    
    def __init__(self, data):
        self.data = data
        self.next = None
class queuelinkedlist:
    
    def __init__(self):
        self.front = None
        self.rear= None
    def is_empty(self):
        return self.front is None
    def enqueue(self,item):
        new_node=Node(item)
        if self.is_empty():
            self.front=new_node
            self.rear=new_node
        else:
            self.rear.next=new_node
            self.rear=new_node
    def dequeue(self):
        if not self.is_empty():
            dequeue_item=self.front.data
            self.front=self.front.next
            if self.front is None:
                self.rear=None
            return dequeue_item
        else:
            raise IndexError('dequeue from an empty queue:')
    def peak(self):
        if not self.is_empty():
            return self.front.data
        else:
            raise IndexError('peak from an empty queue ')
            
    def size(self):
        count=0
        current=self.front
        while current:
            count+=1
            current=current.next
        return count
queue=queuelinkedlist()
queue.enqueue(1)
queue.enqueue(2)
queue.enqueue(3)
print("front of the queue:",queue.peak())
print("Dequeue:",queue.dequeue())
print("Size of the queue",queue.size())
print('stack after the pop',stack.items)
print('is the stack is empty',stack.is_empty())
print('size of the stack:',stack.size())



